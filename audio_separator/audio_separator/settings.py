"""
Django settings for audio_separator project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', "django-insecure-b=8*+b@wh_%no2j9#^agkc)d!+k@1f6o7r6_ipy0xn_6hkbk%o")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "processor",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "processor.middleware.SecurityHeadersMiddleware",
    "processor.middleware.RateLimitMiddleware", 
    "processor.middleware.FileUploadSecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Security Settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# CSRF Settings
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Strict'
CSRF_USE_SESSIONS = True

# Session Security
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Content Security Policy (basic)
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ROOT_URLCONF = "audio_separator.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "audio_separator.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Cache configuration for rate limiting
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Audio Processing Configuration
import os

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Audio processing settings
AUDIO_UPLOAD_PATH = MEDIA_ROOT / 'uploads'
AUDIO_OUTPUT_PATH = MEDIA_ROOT / 'outputs'
AUDIO_TEMP_PATH = MEDIA_ROOT / 'temp'

# File upload constraints
MAX_UPLOAD_SIZE = 100 * 1024 * 1024  # 100MB
ALLOWED_AUDIO_FORMATS = ['.mp3', '.wav', '.flac', '.m4a', '.aac', '.ogg']

# WhisperX model settings
WHISPERX_MODEL = "base"  # Options: tiny, base, small, medium, large-v2
WHISPERX_DEVICE = "cpu"  # Change to "cuda" if GPU available
WHISPERX_BATCH_SIZE = 16
WHISPERX_COMPUTE_TYPE = "float32"

# Speaker diarization settings
DIARIZATION_MIN_SPEAKERS = 1  # Minimum number of speakers to detect
DIARIZATION_MAX_SPEAKERS = 8  # Maximum number of speakers to detect
DIARIZATION_CLUSTERING_THRESHOLD = 0.5  # Lower = more speakers, Higher = fewer speakers

# HuggingFace token for pyannote speaker diarization
# You need to get this from https://huggingface.co/settings/tokens
# and accept the terms for pyannote/speaker-diarization model
HUGGINGFACE_TOKEN = os.environ.get('HUGGINGFACE_TOKEN', None)

# Debug: Print token status for troubleshooting
if HUGGINGFACE_TOKEN:
    print(f"[+] HuggingFace token configured (length: {len(HUGGINGFACE_TOKEN)})")
else:
    print("[!] No HuggingFace token found. Speaker diarization will use fallback method.")
    print("    To enable proper speaker diarization:")
    print("    1. Get token from https://huggingface.co/settings/tokens")
    print("    2. Accept terms at https://huggingface.co/pyannote/speaker-diarization")
    print("    3. Set environment variable: HUGGINGFACE_TOKEN=your_token_here")

# Processing settings
MAX_CONCURRENT_JOBS = 2
JOB_TIMEOUT_SECONDS = 3600  # 1 hour

# Create necessary directories
for path in [AUDIO_UPLOAD_PATH, AUDIO_OUTPUT_PATH, AUDIO_TEMP_PATH]:
    path.mkdir(parents=True, exist_ok=True)

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'audio_processing.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'processor': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'processor.services': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
